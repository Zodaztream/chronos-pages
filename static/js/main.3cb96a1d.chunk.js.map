{"version":3,"sources":["Components/SideDrawer/ToggleButton.js","Components/SideDrawer/CitySelector.js","Components/SideDrawer/SwitchButtons.js","Components/SideDrawer/LinesStopsBtn.js","Components/SideDrawer/DelaysCSS.js","Components/SideDrawer/Delays.js","Data/LinkLines.js","Data/LinkStops.js","Data/NorrLines.js","Data/NorrStops.js","Components/HistoryBox/HistoryBox.js","Components/SideDrawer/SideDrawer.js","Map/map.js","statview.js","settings.js","App.js","serviceWorker.js","index.js"],"names":["toggleButton","props","react_default","a","createElement","className","index_es","onClick","toggleDrawer","Menu_default","cityList","label","value","citySelector","FormControl_default","InputLabel_default","Select_default","city","onChange","cityChoiceHandler","input","OutlinedInput_default","labelWidth","name","id","map","index","MenuItem_default","class","switchBtns","text","switchButtons","option","FormControlLabel_default","control","Switch_default","checked","switchedBtn","toggleBtn","optionList","linesStopsBtn","variant","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","List_default","component","InputBase_default","placeholder","IconButton_default","Search_default","linesList","line","ListItem_default","key","role","undefined","Checkbox_default","checkedIcon","CheckBox_default","savedLines","includes","addLine","ListItemText_default","stopsList","stop","button","primary","styles","theme","toggleLabel","color","height","margin","padding","fontSize","minWidth","fontWeight","fontFamily","borderRadius","textTrransform","boxShadow","&:hover","&:focus","sliderRoot","width","display","justifyContent","sliderContainer","sliderTrack","backgroundColor","sliderThumb","days","Interval","withStyles","_React$createElement","Grid_default","item","xs","zeroMinWidth","container","alignItems","justify","day","lab_ToggleButton_default","classes","root","console","log","spacing","Object","defineProperty","point","TextField_default","intervalValue","intervalHandler","type","InputLabelProps","shrink","Slider_default","track","thumb","slider","aria-labelledby","sliderHandler","LinkLines","LinkStops","NorrLines","NorrStops","historyBox","removeLine","Delete_default","Divider_default","sideDrawer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","side","open","setState","concat","toConsumableArray","state","showHistory","show","savedLinesCopy","indexOf","splice","length","event","target","updateLinesList","updateStopsList","getSwitchedBtn","trafficFlow","toggleSwitchedBtn","updateSelectedItem","selectedItem","updateStartInterval","parseInt","endTime","updateEndInterval","start","startTime","getIntervalValue","filterSliderHandler","percent","Math","round","percentSlider","menuOn","lines","linkoping","norrkoping","delays","sideBar","ChevronLeft_default","SideDrawer_CitySelector","SideDrawer_SwitchButtons","SideDrawer_LinesStopsBtn","SideDrawer_Delays","Toolbar_default","SideDrawer_ToggleButton","Drawer_default","onClose","HistoryBox_HistoryBox","React","PureComponent","mapboxgl","accessToken","style","position","top","bottom","MapboxTraffic","require","Map","showStat","e","statview","lng","lat","zoom","_this$state","mapContainer","center","on","addSource","data","features","properties","geometry","coordinates","addLayer","source","addControl","NavigationControl","remove","_this2","ref","el","Component","opacity","statStyle","right","left","Statview","squares","extras","statistic","extra","weatherButton","float","bounceInRight","zIndex","Settings","toggleSettings","settings","Fab_default","size","aria-label","addExtras","Navigation_default","Icon_default","App","RenderStat","render","statview_Statview","Map_map","val","settings_Settings","SideDrawer_SideDrawer","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cb96a1d.chunk.js","sourcesContent":["import React from 'react'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { IconButton, Grid, Checkbox } from \"@material-ui/core\"\r\n\r\nimport './ToggleButton.css'\r\n\r\nconst toggleButton = props => (\r\n\r\n    <div className=\"menu-icon-container\">\r\n        <IconButton \r\n            onClick={props.toggleDrawer(\"menuOn\", true)}>   \r\n            <MenuIcon className=\"menu-icon\"/>\r\n        </IconButton>\r\n    </div>\r\n);\r\n\r\nexport default toggleButton;\r\n","import React from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\n\r\nimport './CitySelector.css'\r\n\r\n\r\nconst cityList = [\r\n\t\t{\r\n\t\t\tlabel: \"\",\r\n\t\t\tvalue: \"\"\r\n\t\t},\r\n    {\r\n      label: \"Linköping\",\r\n      value: \"Linköping\"\r\n    },\r\n    {\r\n      label: \"Norrköping\",\r\n      value: \"Norrköping\"\r\n    }\r\n  ]\r\n\r\nconst citySelector = props => (\r\n\r\n\t<FormControl className=\"city-selector-container\">\r\n\t\t<InputLabel>\r\n\t\t\t<em className=\"city-selector-label\"> Select City </em>\r\n\t\t</InputLabel>\r\n\r\n\t\t<Select \r\n\t\t\tclassName=\"select-btn\"\r\n\t\t\tvalue={props.city}\r\n\t\t\tonChange={props.cityChoiceHandler}\r\n\t\t\tinput={\r\n\t\t\t\t<OutlinedInput\r\n\t\t\t\t\tlabelWidth={0}\r\n\t\t\t\t\tname=\"city\"\r\n\t\t\t\t\tid=\"citySelector\"\r\n\t\t\t\t/>\r\n\t\t\t}> \r\n\t\t\t\r\n\t\t\t\t{cityList.map((city, index) => (\r\n\t\t\t\t<MenuItem \r\n\t\t\t\t\tclass=\"city-list-container\"\r\n\t\t\t\t\tvalue={city.value}> \r\n\t\t\t\t\t\t<em className=\"city-list-item\"> {city.value} </em> \r\n\t\t\t\t</MenuItem>\r\n\t\t\t\t))}\r\n\t\t</Select>\r\n\t</FormControl>\r\n);\r\n\r\nexport default citySelector;","import React from 'react'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nimport './SwitchButtons.css'\r\n\r\n/*\r\n * In case of more switch buttons are added to the sidebar,\r\n * will this list contain them.\r\n*/ \r\nconst switchBtns = [\r\n\t{\r\n\t text: \"Traffic flow\",\r\n\t name: \"trafficFlow\"  \r\n\t}\r\n]\r\n\r\nconst switchButtons = props => (\r\n\r\n    switchBtns.map((option, index) => (\r\n        <div className=\"switch-container\">\r\n            <FormControlLabel\r\n                className=\"content-container\"\r\n                control={\r\n                    <Switch\r\n                        checked={props.switchedBtn(option.name)}\r\n                        onChange={props.toggleBtn(option.name)}\r\n                        value={option.name}\r\n                    />\r\n                }\r\n                label={<em className=\"switch-text\"> {option.text} </em>}\r\n            />\r\n       </div>\r\n    ))\t\t\r\n);\r\n\r\nexport default switchButtons;","import React from 'react'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nimport './LinesStopsBtn.css'\r\n\r\nconst optionList = [\r\n    {\r\n        text: \"Bus lines\",\r\n        name: \"lines\"\r\n    },\r\n    {\r\n        text: \"Bus Stops\",\r\n        name: \"stops\"\r\n    }\r\n]\r\n    \r\nconst linesStopsBtn = props => (\r\n\t\r\n\toptionList.map((option, index) => (\r\n\t\t<FormControl variant=\"filled\" className=\"container\">\r\n\t\t\t<ExpansionPanel>\r\n\t\t\t\t<ExpansionPanelSummary  className=\"expansion-container\" expandIcon={<ExpandMoreIcon/>} >\r\n\t\t\t\t\t<Typography class=\"option-label\">\r\n\t\t\t\t\t\t{option.text}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t<ExpansionPanelDetails className=\"expansion-panel\">\r\n\t\t\t\t\t<List component=\"nav\" className=\"container\">\r\n\t\t\t\t\t\t<div className=\"search\">\r\n\t\t\t\t\t\t\t<InputBase placeholder=\"Search…\"/>\r\n\t\t\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t\t\t\t<SearchIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{option.name === \"lines\" ? \r\n\t\t\t\t\t\t\t\tprops.linesList.map((line, index) => (\r\n\t\t\t\t\t\t\t\t\t<ListItem \r\n\t\t\t\t\t\t\t\t\t\tclassName=\"line-item\"\r\n\t\t\t\t\t\t\t\t\t\tkey={line.name} \r\n\t\t\t\t\t\t\t\t\t\trole={undefined}>\r\n\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\tcheckedIcon={<CheckBoxIcon className=\"checkbox\"/>}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={!props.savedLines.includes(line.name) ? props.addLine(line.name) : null}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<ListItemText>\r\n\t\t\t\t\t\t\t\t\t\t\t{line.name}\r\n\t\t\t\t\t\t\t\t\t\t</ListItemText>\r\n\t\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t)):\r\n\t\t\t\t\t\t\t\tprops.stopsList.map((stop, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<ListItem button className=\"stop-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListItemText primary={stop.name} />\r\n\t\t\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</ExpansionPanelDetails>\r\n\t\t\t</ExpansionPanel>\r\n\t\t</FormControl>  \r\n  ))\r\n);\r\n\r\nexport default linesStopsBtn;\r\n","\r\nconst styles = theme => ({\r\n    \r\n    toggleLabel: {\r\n        color: 'white',\r\n        height: '25px',\r\n        margin: '0',\r\n        padding: '4px 8px',\r\n        fontSize: '0.6rem',\r\n        minWidth: '20px',\r\n        fontWeight: '250',\r\n        fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\r\n        borderRadius: '2px',\r\n        textTrransform: 'uppercase',\r\n        boxShadow: 'inset 0px 0px 20px 8px rgba(215, 109, 8, 0.87)',\r\n        '&:hover': {\r\n            color: 'black',\r\n          },\r\n        '&:focus': {\r\n            color: 'red',\r\n        }\r\n    },\r\n    sliderRoot: {\r\n        width: '200px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    sliderContainer: {\r\n        width: '100px',\r\n        padding: '22px 0px',\r\n    },\r\n    sliderTrack: {\r\n        backgroundColor: \"rgb(235, 118, 8)\",\r\n    },\r\n    sliderThumb: {\r\n        backgroundColor: \"black\",\r\n    }\r\n});\r\n\r\n  export default styles;\r\n","import React from 'react'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nimport './Delays.css'\r\nimport styles from './DelaysCSS.js'\r\n\r\n\r\nconst days = [\r\n\t{\r\n\t\tname: \"M\",\r\n\t\tid: 0\r\n},\r\n{\r\n\t\tname: \"T\",\r\n\t\tid: 1 \r\n},\r\n{\r\n\t\tname: \"W\",\r\n\t\tid: 2\r\n},\r\n{\r\n\t\tname: \"T\",\r\n\t\tid: 3\r\n},\r\n{\r\n\t\tname: \"F\",\r\n\t\tid: 4\r\n},\r\n{\r\n\t\tname: \"S\",\r\n\t\tid: 5\r\n},\r\n{\r\n\t\tname: \"S\",\r\n\t\tid: 6\r\n}\r\n]\r\n\t\r\nconst Interval = [\"start\", \"end\"];\r\n\r\nconst delays = (props) => ( \r\n\r\n\t<ExpansionPanel >\r\n\t\t<ExpansionPanelSummary className=\"expansion-container\" expandIcon={<ExpandMoreIcon/>} >\r\n\t\t\t<InputLabel>\r\n\t\t\t\t<em className=\"button-label\"> Delays </em>\r\n\t\t\t</InputLabel>\r\n\t\t</ExpansionPanelSummary>\r\n\t\t<ExpansionPanelDetails class=\"expansion-panel\" > \r\n\t\t\t<Grid\r\n\t\t\t\titem xs={12}\r\n\t\t\t\tzeroMinWidth\r\n\t\t\t\tcontainer\r\n\t\t\t\talignItems=\"center\"\r\n\t\t\t\tjustify=\"center\"\r\n\t\t\t>\r\n\t\t\t{days.map((day, index) => (\r\n\t\t\t\t<ToggleButton\r\n\t\t\t\t\tclasses={{\r\n\t\t\t\t\t\troot: props.classes.toggleLabel\r\n\t\t\t\t\t}}> \r\n\t\t\t\t{day.name} </ToggleButton>\r\n\t\t\t))}\r\n\t\t</Grid>\r\n\t\t{console.log(props)}\r\n\t\t\t<Grid\r\n\t\t\t\t\tclassName=\"grid-container\"\r\n\t\t\t\t\titem xs={12}\r\n\t\t\t\t\tzeroMinWidth\r\n\t\t\t\t\tcontainer\r\n\t\t\t\t\tspacing=\"100\"\r\n\t\t\t\t\tclassName=\"\"\r\n\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t>\r\n\t\t\t\t{Interval.map((point, index) => (\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tid={point}\r\n\t\t\t\t\t\tlabel={point}\r\n\t\t\t\t\t\tvalue={props.intervalValue(point)}\r\n\t\t\t\t\t\tonChange={props.intervalHandler}\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tclassName=\"time-container\"\r\n\t\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\t\tshrink: true,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t)) }\r\n\t\t\t</Grid>\r\n\t\t\t<div className=\"slider-container\"> \r\n\t\t\t\t<Slider\r\n\t\t\t\t\tclasses={{\r\n\t\t\t\t\t\troot: props.classes.sliderRoot,\r\n\t\t\t\t\t\tcontainer: props.classes.sliderContainer,\r\n\t\t\t\t\t\ttrack: props.classes.sliderTrack,\r\n\t\t\t\t\t\tthumb: props.classes.sliderThumb\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tvalue={props.slider}\r\n\t\t\t\t\taria-labelledby=\"label\"\r\n\t\t\t\t\tonChange={props.sliderHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<Typography id=\"label\"> {props.slider}% </Typography>\r\n\t\t\t</div>\r\n\t\t</ExpansionPanelDetails>\r\n\t</ExpansionPanel>\r\n);\r\n\r\n\r\nexport default withStyles(styles)(delays)\r\n","const LinkLines = [\r\n  {\r\n    name: 3,\r\n    id: 1\r\n  },\r\n  {\r\n    name: 6,\r\n    id: 2\r\n  },\r\n  {\r\n    name: 8,\r\n    id: 3\r\n  },\r\n  {\r\n    name: 15,\r\n    id: 4\r\n  },\r\n  {\r\n    name: 17,\r\n    id: 5\r\n  }\r\n]\r\n\r\nexport default LinkLines","const LinkStops = [\r\n    {\r\n        name: \"Ryd Centrum\",\r\n        id: 1\r\n      },\r\n      {\r\n        name: \"Resecentrum\",\r\n        id: 2\r\n      },\r\n      {\r\n        name: \"Campus\",\r\n        id: 3\r\n      },\r\n      {\r\n        name: \"StoraTorget\",\r\n        id: 4\r\n      }\r\n]\r\n\r\nexport default LinkStops","const NorrLines = [\r\n    {\r\n\t\t\tname: 5,\r\n\t\t\tid: 1\r\n    },\r\n    {\r\n\t\t\tname: 9,\r\n\t\t\tid: 2\r\n    },\r\n    {\r\n\t\t\tname: 21,\r\n\t\t\tid: 3\r\n    },\r\n    {\r\n\t\t\tname: 22,\r\n\t\t\tid: 4\r\n    },\r\n    {\r\n\t\t\tname: 25,\r\n\t\t\tid: 5\r\n    }\r\n]\r\n\r\nexport default NorrLines","const NorrStops = [\r\n    {\r\n        name: \"Resecentrum\",\r\n        id: 1\r\n    },\r\n    {\r\n        name: \"Centrum\",\r\n        id: 2\r\n    },\r\n    {\r\n        name: \"SuperCentrum\",\r\n        id: 3\r\n    },\r\n    {\r\n        name: \"MiniCentrum\",\r\n        id: 4\r\n    }\r\n]\r\n\r\nexport default NorrStops","import React from \"react\";\r\nimport PropTypes, { checkPropTypes } from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { IconButton, Grid, Checkbox } from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport './HistoryBox.css'\r\n\r\n\r\n\r\nconst historyBox = props => (\r\n   \r\n     <div>\r\n       {console.log(\"history props\")}\r\n       {console.log(props)}\r\n       <List>\r\n         {props.savedLines.map((line, index) =>(\r\n          <div className=\"line-div\">\r\n            <ListItem>\r\n                <IconButton\r\n                  className=\"deleteButton\"\r\n                  onClick={props.removeLine(line)}>\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n                  <ListItemText primary={line} />\r\n            </ListItem>\r\n            <Divider/>\r\n          </div>\r\n          ))} \r\n       </List>\r\n     </div>\r\n);\r\n\r\nexport default historyBox;\r\n","import React, { Component, Fragment } from 'react'\r\nimport ToggleButton from \"./ToggleButton\"\r\nimport CitySelector from \"./CitySelector\"\r\nimport SwitchButtons from \"./SwitchButtons\"\r\nimport LinesStopsBtn from './LinesStopsBtn'\r\nimport Delays from \"./Delays\"\r\n\r\nimport PropTypes, { checkPropTypes } from \"prop-types\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport Drawer from \"@material-ui/core/Drawer\"\r\nimport { IconButton, Grid, Checkbox } from \"@material-ui/core\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\n\r\nimport LinkLines from \"../../Data/LinkLines\"\r\nimport LinkStops from \"../../Data/LinkStops\"\r\nimport NorrLines from \"../../Data/NorrLines\"\r\nimport NorrStops from \"../../Data/NorrStops\"\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport \"./SideDrawer.css\"\r\nimport HistoryBox from '../HistoryBox/HistoryBox'\r\n\r\n\r\nclass sideDrawer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menuOn: false,\r\n      trafficFlow: false,\r\n      lines: false,\r\n      stop: false,\r\n      linkoping: false,\r\n      norrkoping: false,\r\n      city: \"\",\r\n      linesList: [],\r\n\t\t\tstopsList: [],\r\n\t\t\tsavedLines: [],\r\n\t\t\tshowHistory: false,\r\n\t\t\tcitySelector: false,\r\n\t\t\tstartTime: 7,\r\n\t\t\tendTime: 8,\r\n\t\t\tpercentSlider: 50,\r\n\t\t\tdelays: [],\r\n      selectedItem: [{\r\n        type: \"\",\r\n\t\tname: \"\"\r\n\t  }],\r\n\t  switchedBtn: \"\"\r\n    };\r\n  }\r\n\r\n\ttoggleDrawer = (side, open) => () => {\r\n\t\tthis.setState({\r\n\t\t[side]: open\r\n\t\t});\r\n\t};\r\n   \r\n\taddLine = (line) => () => {\r\n\t\tthis.setState({\r\n\t\t\tsavedLines: [...this.state.savedLines, line],\r\n\t\t\tshowHistory: true\r\n\t});\r\n}\t\r\n\r\n\tremoveLine = (line) => () => {\r\n\t\tconsole.log(\"removing line at drawer\")\r\n\t\tconsole.log(line)\r\n\t\tvar show = true;\r\n\t\tvar savedLinesCopy = this.state.savedLines;\r\n\t\tvar index = savedLinesCopy.indexOf(line);\r\n\r\n\t\tif(index > -1){savedLinesCopy.splice(index, 1);}\r\n\t\tif(savedLinesCopy.length == 0){show = false;}\r\n\t\tthis.setState({\r\n\t\t\tsavedLines: savedLinesCopy,\r\n\t\t\tshowHistory: show\r\n\t});\r\n  }\r\n \r\n  \r\n\tshowHistory = () => () => {\r\n\t\tthis.setState({\r\n\t\t\tshowHistory: true\r\n\t\t});\r\n}\r\n\r\n\tcityChoiceHandler = (event) => \r\n\r\n\t\t{if (event.target.value !== \"\") {\r\n\t\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tcity: event.target.value,\r\n\t\t\t\tlinesList: this.updateLinesList(event.target.value),\r\n\t\t\t\tstopsList: this.updateStopsList(event.target.value),\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tcity: event.target.value,\r\n\t\t\t})\r\n\t\t\t}\r\n\t};\r\n\r\n\tgetSwitchedBtn = (name) => {\r\n\t\t\r\n\t\tswitch(name) {\r\n\t\t\tcase \"trafficFlow\":\r\n\t\t\t\treturn this.state.trafficFlow;\r\n\t\r\n\t\t\tdefault:\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n  /* \r\n   * Toggles state of the switched button\r\n  */\r\n  toggleSwitchedBtn = name => event => {\r\n\t  this.setState({\r\n\t\t  [name] : event.target.checked\r\n\t  })\r\n  }\r\n\r\n  /*\r\n    Update selected item.\r\n    Item chosen from lines or stops list\r\n  */ \r\n  updateSelectedItem = (event) => {\r\n\t  this.setState({\r\n\t\t  selectedItem: event.target.value\r\n\t\t})\r\n  }\r\n  \r\n  /*\r\n    Temporarily used as Linköping/Norrköping's\r\n    bus lines data.\r\n    Updates the lines list based on the city selection.\r\n  */\r\n  updateLinesList = (city) => {\r\n\r\n    switch(city) {\r\n      case \"Linköping\":\r\n        return LinkLines;\r\n           \r\n      case \"Norrköping\":\r\n        return NorrLines;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\t}\r\n\r\n   /*\r\n    Temporarily used as Linköping/Norrköping's\r\n    bus stops data.\r\n    Updates the stops list based on the city selection.\r\n  */\r\n  updateStopsList = (city) => {\r\n  \r\n    switch(city) {\r\n     \r\n      case \"Linköping\":\r\n        return LinkStops;\r\n          \r\n      case \"Norrköping\":\r\n        return NorrStops;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\t}\r\n\r\n\tupdateStartInterval = (input) => {\r\n\t\tlet value = parseInt(input, 10)\r\n\t\tif (value > 23) {\r\n\t\t\treturn 1\r\n\t\t} \r\n\t\telse if (value < 1) {\r\n\t\t\treturn 23\r\n\t\t} else if (this.state.endTime <= value) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tendTime: value + 1\r\n\t\t\t})\r\n\t\t\treturn value\r\n\t\t} else {\r\n\t\t\treturn value\r\n\t\t}\r\n\t}\r\n\t\r\n\tupdateEndInterval = (input) => {\r\n\t\tlet value = parseInt(input, 10)\r\n\t\tlet start = parseInt(this.state.startTime, 10)\r\n\t\tif (value <= start) {\r\n\t\t\treturn start + 1\r\n\t\t} \r\n\t\telse if (value > 24) {\r\n\t\t\treturn value - 1\r\n\t\t} \r\n\t\telse if (value < 1) {\r\n\t\t\treturn 1\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetIntervalValue = (point) => {\r\n\t\tswitch(point) {\r\n\t\t\tcase \"start\":\r\n\t\t\t\treturn this.state.startTime\r\n\t\t\tcase \"end\":\r\n\t\t\t\treturn this.state.endTime\r\n\t\t}\r\n\t}\r\n\r\n\tintervalHandler = (event) => {\r\n\t\tswitch(event.target.id) {\r\n\t\t\tcase \"start\":\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tstartTime: this.updateStartInterval(event.target.value)\r\n\t\t\t\t})\r\n\t\t\t\tbreak;\r\n          \r\n      case \"end\":\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tendTime: this.updateEndInterval(event.target.value)\r\n\t\t\t\t})\r\n\t\t\t\tbreak;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\t}\r\n\tfilterSliderHandler = (event, value) => {\r\n\t\tlet percent = Math.round(value)\r\n\t\tthis.setState({\r\n\t\t\tpercentSlider: percent\r\n\t\t})\r\n\t}\r\n\r\n  render() {\r\n    //const { classes } = this.props;\r\n\r\n    const sideBar = (\r\n    \t<div className=\"menu\">\r\n\t\t\t\t<div className=\"arrow-container\">\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={this.toggleDrawer(\"menuOn\", !this.state.menuOn)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t<ChevronLeftIcon className=\"arrow\" \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Divider />\r\n\r\n\t\t\t\t<CitySelector city={this.state.city} cityChoiceHandler={this.cityChoiceHandler} />\r\n\t\t\t\t<SwitchButtons switchedBtn={this.getSwitchedBtn} toggleBtn={this.toggleSwitchedBtn}/>\r\n\r\n\t\t\t\t{this.state.city !== \"\" ? \r\n\t\t\t\t<div>\r\n\t\t\t\t\t<LinesStopsBtn \r\n\t\t\t\t\t\tlinesList={this.state.linesList} \r\n\t\t\t\t\t\tstopsList={this.state.stopsList}\r\n\t\t\t\t\t\tsavedLines={this.state.savedLines} \r\n\t\t\t\t\t\taddLine={this.addLine}\r\n\t\t\t\t\t/> \r\n\t\t\t\t\t\r\n\t\t\t\t\t<Delays \r\n\t\t\t\t\t\tstartTime={this.state.startTime} \r\n\t\t\t\t\t\tendTime={this.state.endTime} \r\n\t\t\t\t\t\tintervalHandler={this.intervalHandler}\r\n\t\t\t\t\t\tintervalValue={this.getIntervalValue}\r\n\t\t\t\t\t\tslider={this.state.percentSlider}\r\n\t\t\t\t\t\tsliderHandler={this.filterSliderHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t: null }\r\n\t\t</div>\r\n    );\r\n\r\n    return (\r\n      <div > \r\n        <Toolbar>\r\n          <ToggleButton toggleDrawer={this.toggleDrawer} />\r\n        </Toolbar>\r\n        \r\n\t\t    <Drawer \r\n          className=\"menu\"\r\n          open={this.state.menuOn}\r\n          onClose={this.toggleDrawer(\"menuOn\", false)}\r\n          >\r\n          {sideBar}\r\n        </Drawer>\r\n\r\n\t\t{this.state.showHistory ? <HistoryBox removeLine={this.removeLine} savedLines={this.state.savedLines}/> : null}\r\n\t\t\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nsideDrawer.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default sideDrawer;\r\n","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1Ijoiem9kYXp0cmVhbSIsImEiOiJjanNwd3llMWgweWh3NDlxbDI0cDJudjgzIn0.yAqs4KNjjU4-Wf6VGTyLcw\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: 0,\r\n  bottom: 0,\r\n  width: \"100%\",\r\n  height: \"100%\"\r\n};\r\n\r\nconst MapboxTraffic = require(\"@mapbox/mapbox-gl-traffic\");\r\n\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { lng: 15.62, lat: 58.41, zoom: 12, statview: false };\r\n  }\r\n  componentDidMount() {\r\n    const { lng, lat, zoom } = this.state;\r\n\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: \"mapbox://styles/mapbox/streets-v9\",\r\n      center: [lng, lat],\r\n      zoom\r\n    });\r\n\r\n    // some sort of fetch here\r\n    var geojson = {\r\n      type: \"FeatureCollection\",\r\n      features: [\r\n        {\r\n          type: \"Feature\",\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [15.62, 58.41]\r\n          },\r\n          properties: {\r\n            title: \"Statistic\",\r\n            description: \"Show statistic\"\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    map.on(\"load\", () => {\r\n      map.addSource(\"testSource\", {\r\n        type: \"geojson\",\r\n        data: {\r\n          type: \"FeatureCollection\",\r\n          features: [\r\n            {\r\n              type: \"Feature\",\r\n              properties: {},\r\n              geometry: {\r\n                type: \"Point\",\r\n                coordinates: [15.624961853027346, 58.410659937025905]\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"test\",\r\n        type: \"circle\",\r\n        source: \"testSource\"\r\n      });\r\n    });\r\n\r\n    map.on(\"click\", \"test\", this.showStat);\r\n\r\n    map.addControl(new mapboxgl.NavigationControl());\r\n    map.addControl(new MapboxTraffic());\r\n  \r\n    \r\n    map.on(\"move\", () => {});\r\n  }\r\n\r\n  showStat = e => {\r\n    //let coord = e.features[0].geometry.coordinates.slice(); // Not necessary for now\r\n    //this.statview = true;\r\n    this.props.statview(true, \"some-data\");\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.map.remove();\r\n  }\r\n\r\n  render() {\r\n    return <div style={style} ref={el => (this.mapContainer = el)} />;\r\n  }\r\n}\r\nexport default Map;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nvar styles = {\r\n  position: \"absolute\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  opacity: 0.3,\r\n  backgroundColor: \"black\"\r\n};\r\n\r\nvar statStyle = {\r\n  position: \"absolute\",\r\n  top: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  left: 0,\r\n  borderRadius: \"3px\",\r\n  width: \"55%\",\r\n  height: \"70%\",\r\n  margin: \"auto\",\r\n  backgroundColor: \"white\"\r\n};\r\n\r\nexport default class Statview extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { squares: 1, extras: [] }; // might not be necessary\r\n  }\r\n\r\n  componentDidMount() {\r\n    // fetch the statistic from database\r\n    // Attach statistic to D3\r\n    // (and then render this in the render function)\r\n    console.log(this.props.statistic); //PERHAPS I can combine statistic and extra so to reduce redudant code. Reducing code complexity.\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Settings (props) from upper level with say Date/Time/How many stats etc)\r\n    // this will in turn update the render (somehow) by adding or removing grids\r\n    // from the gridlayer in which we show our statistical data like graphs.\r\n    // so an example would be say we have 1 square (taking up the entire screen)\r\n    // , and we subsequently add another square (we must count), then\r\n    // the square would dynamically change so to reflect the addition\r\n    //           _______________                __________________\r\n    //          |               |              |         |        |\r\n    //          |               |       =>     |         |        |\r\n    //          |               |       =>     |         |        |\r\n    //          |_______________|              |_________|________|\r\n\r\n    console.log(this.props);\r\n    this.setState({ extras: this.props.extras });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear statistic (MIGHT NOT be necessary, might be done when component is replaced)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={styles} onClick={this.props.onClick} />\r\n        <div style={statStyle}>\r\n          <h1>{this.props.statistic}</h1>\r\n          {this.state.extras.map(extra => {\r\n            return <h1>{extra}</h1>;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\r\n\r\nconst button = {\r\n  position: \"absolute\",\r\n  top: \"20%\",\r\n  right: 0\r\n};\r\n\r\nconst weatherButton = {\r\n  float: true,\r\n  left: \"2%\",\r\n  top: \"80%\",\r\n  display: \"inline-block\"\r\n};\r\n\r\nconst statStyle = {\r\n  bounceInRight: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    borderRadius: \"3px\",\r\n    width: \"30%\",\r\n    height: \"30%\",\r\n    margin: \"1%\",\r\n    backgroundColor: \"white\",\r\n    boxShadow: \"2px 2px gray\",\r\n    zIndex: 2000\r\n  }\r\n};\r\n\r\nexport default class Settings extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { show: false };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // send up when an item is, say, clicked Maybe not necessary\r\n  }\r\n\r\n  toggleSettings = () => {\r\n    this.setState({ show: !this.state.show });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    // consider adding  ENUM for various buttons like Weather etc so to make it safer.\r\n    const settings = (\r\n      <div style={statStyle.bounceInRight}>\r\n        <Fab\r\n          variant=\"extended\"\r\n          size=\"medium\"\r\n          color=\"primary\"\r\n          aria-label=\"Add\"\r\n          style={weatherButton}\r\n          onClick={() => {\r\n            this.props.addExtras(\"weather\");\r\n          }}\r\n        >\r\n          <NavigationIcon />\r\n          Weather\r\n        </Fab>\r\n\r\n        <Fab\r\n          variant=\"extended\"\r\n          size=\"medium\"\r\n          color=\"primary\"\r\n          aria-label=\"Add\"\r\n          style={weatherButton}\r\n        >\r\n          <NavigationIcon />\r\n          Data 2\r\n        </Fab>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Fab\r\n          color=\"secondary\"\r\n          aria-label=\"Edit\"\r\n          onClick={this.toggleSettings}\r\n          style={button}\r\n        >\r\n          <Icon>edit_icon</Icon>\r\n        </Fab>\r\n\r\n        {this.state.show && settings}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport SideDrawer from \"./Components/SideDrawer/SideDrawer.js\";\r\nimport Map from \"./Map/map.js\";\r\nimport Statview from \"./statview.js\";\r\nimport Settings from \"./settings.js\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { statview: false, statistic: \"\", extras: [] };\r\n  }\r\n\r\n  RenderStat = props => {\r\n    const render = props.render;\r\n    console.log(render);\r\n    return render ? (\r\n      <Statview\r\n        onClick={() => this.setState({ statview: false, statistic: \"\" })}\r\n        statistic={this.state.statistic}\r\n        extras={this.state.extras}\r\n      />\r\n    ) : (\r\n      <div />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Map\r\n          statview={(val, statistic) => {\r\n            this.setState({ statview: val, statistic: statistic });\r\n          }}\r\n        />\r\n        <this.RenderStat render={this.state.statview} />\r\n        <Settings\r\n          addExtras={extra => {\r\n            this.setState({ extras: [...this.state.extras, extra] }); // need to make sure we DO NOT add the same element multiple times (UNIQUE???)\r\n          }}\r\n        />\r\n        <SideDrawer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}